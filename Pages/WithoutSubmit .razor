@page "/withoutsubmit"
@using Blazored.FluentValidation
@using FluentValidation

<h3>Without Submit</h3>

<EditForm EditContext="editContext">
    <FluentValidationValidator />

    <FluentGrid style="width:500px;">
        <FluentGridItem xs="12" sm="6">
            <FluentTextField Label="Subject" @bind-Value=item.Subject />
        </FluentGridItem>
        <FluentGridItem xs="12" sm="6">
            <ValidationMessage For="() => item.Subject" />
        </FluentGridItem>

        <FluentGridItem xs="12" sm="6">
            <FluentTextArea Label="Message" Resize="TextAreaResize.Both" @bind-Value=item.Message />
        </FluentGridItem>
        <FluentGridItem xs="12" sm="6">
            <ValidationMessage For="() => item.Message" />
        </FluentGridItem>
    </FluentGrid>
    <br />

    <FluentButton Appearance="Appearance.Accent" OnClick="HandleSubmit">Send</FluentButton>
</EditForm>
<br />

@if (templates.Count > 0)
{
    <FluentDataGrid Items="templates.AsQueryable()" style="width:500px;">
        <PropertyColumn Property="x => x.DateTime" Format="yyyy-MM-dd HH:mm:ss" />
        <PropertyColumn Property="x => x.Subject" />
        <PropertyColumn Property="x => x.Message" Class="multiline-text" />
    </FluentDataGrid>
}

@code {
    readonly List<MailTemplate> templates = new();

    EditContext? editContext;

    MailTemplate item = new();

    protected override void OnInitialized()
    {
        editContext = new(item);
    }

    void HandleSubmit()
    {
        if (editContext != null && editContext.Validate())
        {
            ValidSubmit();
        }
    }

    void ValidSubmit()
    {
        item.DateTime = DateTime.Now;
        templates.Add(item);

        item = new()
            {
                Subject = "Re: " + templates[^1].Subject,
                Message = "anonymous wrote:\n>" + templates[^1].Message.Replace("\n", "\n> "),
            };
        editContext = new(item);
    }

    public class MailTemplate
    {
        public DateTime DateTime { get; set; }

        public string Subject { get; set; } = "";

        public string Message { get; set; } = "";
    }

    public class MailTemplateValidator : AbstractValidator<MailTemplate>
    {
        public MailTemplateValidator()
        {
            RuleFor(x => x.Subject).NotEmpty();
            RuleFor(x => x.Message).NotEmpty();
        }
    }
}
